%% Using the SSIT to fit and Design Single-Cell Experiments 
% In this script, we show how the SSIT can be used to identify a
% time-inhomogeneous model for the activation of Dusp1 mRNA expression
% under Dexamethasome stimulation of Glucocorticoid Receptors.
  clear all
  clc
%% Complex Dusp1 model
  Model = SSIT;
  Model.species = {'x1';'x2';'x3'};  % GRnuc, geneOn, dusp1
  Model.initialCondition = [0;0;0];
  Model.propensityFunctions = {'(kcn0+kcn1*IDex)';'knc*x1';...
      'kon*x1*(2-x2)';'koff*x2';'kr*x2';'gr*x3'};
  Model.inputExpressions = {'IDex','(t>0)*exp(-r1*t)'};
  Model.parameters = ({'koff',0.14;'kon',0.01;'kr',1;'gr',0.01;...
      'kcn0',0.01;'kcn1',0.1;'knc',1;'r1',0.01});
  Model.stoichiometry = [ 1,-1, 0, 0, 0, 0;...
      0, 0, 1,-1, 0, 0;...
      0, 0, 0, 0, 1,-1];
  Model.fspOptions.initApproxSS = true;

  %% Load saved mHast and Sensitivity
%   mhResults = load('complex_dusp1_mhast.mat').mhResults;
%   sensSoln = load('complex_dusp1_sens.mat').sensSoln;
%   comp_Model = load('complex_dusp1_model.mat').Model;
%   %fspSoln = load('complex_dusp1_FSP.mat').fspSoln;
%   comp_Model.plotMHResults(mhResults);

  mhResults = load('complex_dusp1_Trp_mhast.mat').mhResults;
  sensSoln = load('complex_dusp1_Trp_sens.mat').sensSoln;
  ModelTrypt = load('complex_dusp1_Trp_model.mat').ModelTrypt;

%% |COV| plotted vs time
  %trpt_times_vect = linspace(0,180,10);
  trpt_times_vect = [0:10:50,55:5:180];
  %trpt_times_vect = [0:10:40,42:2:180];
  for i = length(trpt_times_vect):-1:1
      i
      tic
      ModelTrypt_t{i} = ModelTrypt;
      ModelTrypt_t{i}.parameters{9,2} = trpt_times_vect(i);
      ModelTrypt_t{i}.sensOptions.solutionMethod = 'finiteDifference';
      ModelTrypt_t{i}.solutionScheme = 'fspSens';
      ModelTrypt_t{i}.fspOptions.fspTol = 1e-6;
      [sensSoln_t{i},ModelTrypt_t{i}.fspOptions.bounds] = ModelTrypt_t{i}.solve;
      fimResults{i} = ModelTrypt_t{i}.computeFIM(sensSoln_t{i}.sens);
      FIM_all{i} = ModelTrypt_t{i}.evaluateExperiment(fimResults{i},ModelTrypt_t{i}.dataSet.nCells);
      FIM_det(i) = det(FIM_all{i}(1:8,1:8));
      
      toc
  end 
  
  plot(trpt_times_vect,FIM_det.^(-1))
  title('|COV| vs time')
  ylabel('|COV|')
  xlabel('measurement timepoints [min]')


  %% |COV| plotted vs time optimized
  trpt_times_vect = [0:10:40,42:2:180];
  for i = length(trpt_times_vect):-1:1
      i
      tic
      ModelTrypt_t{i} = ModelTrypt;
      ModelTrypt_t{i}.parameters{9,2} = trpt_times_vect(i);
      ModelTrypt_t{i}.sensOptions.solutionMethod = 'finiteDifference';
      ModelTrypt_t{i}.solutionScheme = 'fspSens';
      ModelTrypt_t{i}.fspOptions.fspTol = 1e-6;
      [sensSoln_t{i},ModelTrypt_t{i}.fspOptions.bounds] = ModelTrypt_t{i}.solve;
      fimResults{i} = ModelTrypt_t{i}.computeFIM(sensSoln_t{i}.sens);
      % Optimization
      nTotal = sum(ModelTrypt_t{i}.dataSet.nCells);
      nCellsOpt = ModelTrypt_t{i}.optimizeCellCounts(fimResults{i},nTotal,'TR[1:4]');
      fimOpt{i} = ModelTrypt_t{i}.evaluateExperiment(fimResults{i},nCellsOpt);
      FIM_all_opt{i} = ModelTrypt_t{i}.evaluateExperiment(fimOpt{i},ModelTrypt_t{i}.dataSet.nCells);
      FIM_det_opt(i) = det(FIM_all{i}(1:8,1:8));
      
      toc
  end
  
  plot(trpt_times_vect,FIM_det_opt.^(-1))
  title('|COV| vs time [Optimized]')
  ylabel('|COV|')
  xlabel('measurement timepoints [min]')

